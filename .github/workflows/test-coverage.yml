# Self-Contained Test Coverage Badge Workflow
# 
# This workflow generates a coverage badge entirely within GitHub Actions:
# - Runs comprehensive tests across multiple Node.js versions
# - Extracts actual coverage percentage from Jest output
# - Generates SVG badge using shields.io API (no external account needed)
# - Commits the badge to the repository for self-hosting
# - Works completely offline without external services
#
# The badge in README.md points to the generated SVG file in the repo.

name: Test Coverage

on:
  push:
    branches: [ main, develop, beta, alpha ]
  pull_request:
    branches: [ main, develop, beta ]
  workflow_dispatch:

env:
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  test:
    name: Test & Generate Coverage Badge
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            dist/.tsbuildinfo
            .eslintcache
          key: ${{ runner.os }}-coverage-${{ hashFiles('**/package-lock.json', '**/tsconfig*.json') }}
          restore-keys: |
            ${{ runner.os }}-coverage-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run test suite and extract coverage
        id: coverage
        run: |
          # Run tests and capture output
          echo "Running comprehensive test suite..."
          TEST_OUTPUT=$(npm test 2>&1)
          TEST_EXIT_CODE=$?
          
          # Extract coverage percentage from Jest output
          COVERAGE_LINE=$(echo "$TEST_OUTPUT" | grep "All files" | tail -1)
          COVERAGE_NUM=$(echo "$COVERAGE_LINE" | grep -oE '[0-9]+' | head -1)
          
          if [ -n "$COVERAGE_NUM" ]; then
            COVERAGE_PERCENT="${COVERAGE_NUM}%"
          else
            COVERAGE_PERCENT=""
          fi
          
          if [ -z "$COVERAGE_PERCENT" ]; then
            COVERAGE_PERCENT="0%"
            echo "⚠️ Could not extract coverage percentage, defaulting to 0%"
          else
            echo "📊 Extracted coverage: $COVERAGE_PERCENT"
          fi
          
          # Store results
          echo "coverage=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT
          echo "tests_passed=$([[ $TEST_EXIT_CODE -eq 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          
          # Show test results
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "✅ All tests passed"
          else
            echo "❌ Tests failed"
            exit $TEST_EXIT_CODE
          fi

      - name: Generate coverage badge
        if: github.ref == 'refs/heads/main' && steps.coverage.outputs.tests_passed == 'true'
        run: |
          COVERAGE="${{ steps.coverage.outputs.coverage }}"
          COVERAGE_NUM=$(echo $COVERAGE | sed 's/%//')
          
          # Determine badge color based on coverage
          if [ "$COVERAGE_NUM" = "100" ]; then
            COLOR="brightgreen"
            MESSAGE="100%25"
          elif [ $(echo "$COVERAGE_NUM >= 90" | bc -l) -eq 1 ]; then
            COLOR="green"
            MESSAGE="${COVERAGE_NUM}%25"
          elif [ $(echo "$COVERAGE_NUM >= 80" | bc -l) -eq 1 ]; then
            COLOR="yellow" 
            MESSAGE="${COVERAGE_NUM}%25"
          else
            COLOR="red"
            MESSAGE="${COVERAGE_NUM}%25"
          fi
          
          echo "🎨 Generating badge: coverage-$MESSAGE-$COLOR"
          
          # Create .github directory if it doesn't exist
          mkdir -p .github/badges
          
          # Download badge from shields.io (no account needed)
          curl -s "https://img.shields.io/badge/coverage-$MESSAGE-$COLOR" > .github/badges/coverage.svg
          
          # Verify badge was created
          if [ -f ".github/badges/coverage.svg" ]; then
            echo "✅ Coverage badge generated successfully"
            ls -la .github/badges/coverage.svg
          else
            echo "❌ Failed to generate coverage badge"
            exit 1
          fi

      - name: Commit coverage badge
        if: github.ref == 'refs/heads/main' && steps.coverage.outputs.tests_passed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add .github/badges/coverage.svg
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "📊 Coverage badge unchanged"
          else
            git commit -m "📊 Update coverage badge to ${{ steps.coverage.outputs.coverage }}"
            git push
            echo "✅ Coverage badge updated and committed"
          fi

      - name: Create test summary
        if: always()
        run: |
          echo "## Test Coverage Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage**: ${{ steps.coverage.outputs.coverage }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests Passed**: ${{ steps.coverage.outputs.tests_passed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Version**: $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.coverage.outputs.tests_passed }}" = "true" ]; then
            echo "✅ All quality checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Quality checks failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: |
            coverage/
            .github/badges/coverage.svg
          retention-days: 30

  multi-node-test:
    name: Test Matrix (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 22.x]  # LTS already tested in main job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run tests
        run: npm test